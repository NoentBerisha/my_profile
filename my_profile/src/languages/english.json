{
  "personalDetails": "Personal Details",
  "education": "Education",
  "languages": "Languages",
  "skills": "Skills",
  "certifications": "Certifications",
  "experience": "Experience",
  "projects": "Projects",
  "cv": "CV",
  "name": "Name",
  "surname": "Surname",
  "email": "Email",
  "phone": "Phone",
  "githubLink": "Github",
  "seeCV": "See CV",
  "projectDescription": "Project description...",
  "experienceItem1": "Developed and maintained web applications that facilitate real-time information sharing and service management",
  "experienceItem2": "Utilized Java (Spring Boot) for backend microservices, ensuring efficient data processing and scalable architecture",
  "experienceItem3": "Implemented dynamic frontend features using React, integrating with backend services through RESTful APIs",
  "experienceItem4": "Managed and optimized databases using MySQL and MongoDB for effective data storage and retrieval. Utilized Docker and Kubernetes for deployment and scaling",
  "xDental": "X Dental App is a comprehensive website designed for a dental clinic, utilizing React for the frontend, Spring Boot for the backend, and Docker for database management. The platform offers detailed information about the clinicâ€™s services, dentist profiles, location, and multiple contact options. It features an integrated calendar system that enables dentists to efficiently schedule and manage their availability, while also allowing patients to view dentists availability.",
  "industrial": "Potizo is a comprehensive web application developed during my bachelor studies, designed for the municipality of Thessaloniki. The platform enables users to view trees within the municipality and allows registered users to adopt and maintain these trees, promoting community involvement in urban greenery.  Built with React for the frontend and Node.js with Express for the backend, Potizo features a robust architecture with a database managed in Docker. The project leverages the latest coding methodologies to ensure high performance and maintainability. ",
  "chatApp": "This is a learning-focused project built to explore the use of WebSockets. Developed using Spring Boot for the backend and React for the frontend, it enables real-time messaging through WebSockets. Messages are stored in a MySQL database managed via Docker, demonstrating the integration of WebSockets with persistent data storage. This is a standalone microservice which later can be used in a project that requires such functionality.",
  "Os": "This project, developed during my bachelor studies, simulates RAM using Processing.js. It showcases various memory management algorithms, including First In First Out (FIFO), Round Robin etc. Providing a visual representation of how each algorithm operates. The simulation allows users to observe the dynamics of memory allocation and management in real-time. Additionally, the project features functionality for coalescing two empty RAM segments, creating a larger contiguous block of memory to enhance efficiency and optimize space for new programs.",
  "socialMedia": "This project is a social media platform developed using React for the frontend and Node.js for the backend, built for learning purposes. Currently a work in progress, the goal is to structure the backend into separate microservices, ensuring modularity and scalability.",
  "thesis": "For my dissertation, I developed a Travel Assistant application using microservices and micro frontends. The frontend was built with React, and the backend utilized Spring Boot, with Docker managing the environment. I employed Kubernetes for rolling updates and efficient scaling of services, ensuring high availability by balancing loads across multiple instances of microservices.  To facilitate communication between services, I implemented Google Pub/Sub, enabling reliable messaging and event-driven architecture. The database was managed with MongoDB, that runs in Docker, allowing for flexible data storage and retrieval.  Additionally, I used Eureka for service discovery, making it easier for microservices to dynamically locate each other, and an API Gateway to centralize and streamline external communication, enhancing security and access control. The microservices were designed to be reusable and flexible, enabling minimal changes when adding new components, which improved extensibility.  Security was reinforced using filters and token-based authentication to protect resources. The user interface adhered to Nielsen's usability principles, providing a visually appealing and easy-to-navigate experience.",
  "webYear1": "This project, developed during my bachelor studies, is a website created using HTML, CSS, JavaScript, and jQuery. It serves as an informational platform where users can explore a wide range of topics, including medicine, physics, technology, and more. The website provides a user-friendly interface for accessing diverse content on different fields of interest.",
  "deployDestroy": "Deploy Destroy is a strategy game developed using Java Swing as part of my bachelor studies. In the game, players deploy various units onto a battlefield and engage in tactical combat, aiming to outsmart and eliminate enemy forces. The gameplay involves careful planning and strategic placement of units, requiring players to think ahead and make quick decisions to gain an advantage and ultimately destroy the opponent's base. The user interface is built with Java Swing, providing a smooth and interactive gaming experience together with fancy animations."
}